<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Cielo borad</title>
  <style>
    * {
      margin: 0;
      box-sizing: border-box;
    }

    body {
      background-color: #eee;
    }

    ul,
    ol {
      list-style: none;
      padding: 0;
    }

    a {
      text-decoration: none;
    }

    .btn {
      padding: 5px 10px;
      border-radius: 10px;
      margin: 0 5px;
      font-weight: bold;
      color: #000;
    }

    .btn.orange {
      background-color: orange;
    }

    .btn.blue {
      background-color: dodgerblue;
    }

    .btn.red {
      background-color: coral;
    }

    .inner {
      position: absolute;
      width: 1200px;
      height: 100vh;
      left: 0;
      right: 0;
      margin: auto;
      padding: 50px;
    }

    .inner .board_container {}

    .inner .board_container .board_header {
      text-align: center;
    }

    .inner .board_container .board_write {
      margin-top: 30px;
      text-align: right;
    }

    .inner .board_container .board_write span {
      margin-right: 30px;
      font-weight: bold;
    }

    .inner .board_container .board_body {
      width: 100%;
      margin-top: 50px;
    }

    .inner .board_container .board_body .board {
      width: 100%;
      display: flex;
      flex-direction: column;
    }

    .inner .board_container .board_body .board li {
      width: 100%;
      border-radius: 30px;
      border: 1px solid #999;
      background-color: #fff;
      margin-bottom: 30px;
      display: flex;
      flex-direction: column;
      align-items: center;
    }

    .inner .board_container .board_body .board li div {
      margin: 20px 30px;
    }

    .inner .board_container .board_body .board li .author {
      font-size: 20px;
    }

    .inner .board_container .board_body .board li .title {
      font-size: 28px;
    }

    .inner .board_container .board_body .board li .content {
      font-size: 20px;
    }
  </style>
</head>


<body>
  <div class="inner">
    <div class="board_container">
      <div class="board_header">
        <h1>Cielo Board</h1>
      </div>
      <div class="board_write">
        <span>현재 등록 글 : &nbsp; <%= articleCounts %></span>
        <!-- localhost:4000/board/write -->
        <a class="btn red" href="/dbBoard/write">글쓰기</a>
        <a class="btn orange" href="/login/logout">로그아웃</a>
      </div>
      <div class="board_body">
        <ul class="board">
          <% if (articleCounts > 0) { %>
          <% for(let i=0; i < articleCounts; i++) { %>
          <li>
            <div class="author">
              작성자: <%= ARTICLE[i].USERID %>
            </div>
            <div class="title">
              <%= ARTICLE[i].TITLE %>
            </div>
            <div class="content">
              <%= ARTICLE[i].CONTENT %>
            </div>
            <div class="content">
              <% if (ARTICLE[i].IMAGE !== null && ARTICLE[i].IMAGE !== undefined) { %>
              <img src="/uploads/<%= ARTICLE[i].IMAGE %>" width="500" />
              <% } %>
            </div>
            <div class="foot">
              <% if (ARTICLE[i].USERID === userId) { %>
              <a class="btn orange" href="/dbBoard/modify/<%= ARTICLE[i]._id %>">수정</a>
              <a class="btn blue" href="#" onclick="deleteArticle('<%= ARTICLE[i]._id %>')">삭제</a>
              <% } %>
            </div>
          </li>
          <% } %>
          <% } else { %>
          <li>
            <div class="title">글이 없습니다!</div>
            <% } %>
        </ul>
      </div>
    </div>
  </div>

  <script>
    async function deleteArticle(id) {
      // async, await 로 구현!!!
      // then 으로 받아야 될 것을 await 걸고 변수로 받는 것.
      const res = await fetch(`/dbBoard/delete/${id}`, {
        method: 'DELETE'
      })

      console.log(res);

      // 에러가 나오는 상황을 먼저 예외 처리해서 depth 줄이기.
      if (res.status !== 200) return alert('통신 실패')

      const msg = await res.json();
      console.log(msg);
      location.reload();


      // // 프로미스 체이닝 형태!!!
      // // fetch 함수로 요청 보내기. 요청이 dbBoard.js 의 미들웨어로 날아감.
      // fetch(`http://localhost:4000/dbBoard/delete/${id}`, {
      //   method: 'delete',
      //   headers: {
      //     // rea.body 에 담긴 것이 json 형태라는 것.
      //     'Content-type': 'application/json',
      //   }
      // }).then((res) => {
      //   // if (res.status === 200) location.reload();

      //   // res 에서 전달받은 json 형태 데이터 출력
      //   console.log('RESPONSE', res);
      //   return res.json(); // 시간이 필요한 작업.
      // }).then((msg) => {
      //   // 프로미스 체인 형태로.
      //   console.log('MSG', msg);
      //   location.reload();
      // })
    }
  </script>
</body>

</html>